// Iniciar isso aqui escreva no terminal: node chatbot.js

// Importando bibliotecas necess√°rias
const qrcode = require('qrcode-terminal'); // Gera QR Code para autentica√ß√£o do WhatsApp
const { Client, Buttons, List, MessageMedia } = require('whatsapp-web.js'); // Biblioteca para integra√ß√£o com WhatsApp
const client = new Client({
    puppeteer: {
        args: ['--no-sandbox', '--disable-setuid-sandbox'],
    }
}); // Criando uma inst√¢ncia do cliente

// Criando vari√°veis globais para controle de atendimento
const usuariosAtendidos = new Set(); // Armazena n√∫meros de usu√°rios j√° atendidos
const usuariosSilenciados = new Map(); // Armazena usu√°rios que pediram para n√£o receber mais mensagens por um tempo
const estadoUsuarios = new Map(); // Armazena em que etapa do atendimento o usu√°rio est√°

// Evento acionado quando um QR Code for gerado
client.on('qr', qr => {
    qrcode.generate(qr, { small: true }); // Exibe o QR Code no terminal
});

// Evento acionado quando o bot est√° pronto para uso
client.on('ready', () => {
    console.log('Tudo certo! WhatsApp conectado.');
});

// Inicializa o cliente do WhatsApp
client.initialize();

// Fun√ß√£o para criar um atraso (delay) ass√≠ncrono
const delay = ms => new Promise(res => setTimeout(res, ms));

// Evento acionado sempre que o bot recebe uma mensagem
client.on('message', async msg => {
    if (msg.isGroupMsg) return; // Se for mensagem de grupo, ignora e n√£o responde

    const chat = await msg.getChat();
    if (chat.isMuted || chat.isArchived || chat.isReadOnly) return; // N√£o responde mensagens de chats trancados, arquivados ou somente leitura

    const numero = msg.from; // N√∫mero do usu√°rio que enviou a mensagem
    const mensagem = msg.body.toLowerCase(); // Conte√∫do da mensagem em min√∫sculas para facilitar a compara√ß√£o
    const agora = Date.now(); // Obt√©m o timestamp atual
    
    // Verifica se o usu√°rio est√° silenciado e impede resposta se ainda estiver no per√≠odo de 2 horas
    if (usuariosSilenciados.has(numero)) {
        const tempoPassado = agora - usuariosSilenciados.get(numero);
        if (tempoPassado < 2 * 60 * 60 * 1000) { // 2 horas em milissegundos
            return; // Se ainda estiver no tempo de sil√™ncio, n√£o responde
        } else {
            usuariosSilenciados.delete(numero); // Remove da lista de silenciados ap√≥s 2 horas
        }
    }

    // Se o usu√°rio ainda n√£o foi atendido, inicia a intera√ß√£o inicial
    if (!usuariosAtendidos.has(numero) && msg.from.endsWith('@c.us')) {
        const contact = await msg.getContact(); // Obt√©m informa√ß√µes do contato
        const name = contact.pushname ? contact.pushname.split(" ")[0] : "amigo"; // Pega o primeiro nome do contato

        await delay(3000);
        await chat.sendStateTyping();
        await delay(3000);
        await client.sendMessage(msg.from, `Ol√°, ${name}! üòä Muito prazer sou Lucas um assistente virtual.` +
            //"J√° que ele se encontra ocupado, estou aqui para ajudar a agilizar os assuntos." +
            "Por gentileza, me diga qual ajuda voc√™ gostaria digitando uma das op√ß√µes:" +
            "0Ô∏è‚É£ - Ver o menu de Op√ß√µes." +
            "#Ô∏è‚É£ - Falar com um atendente.");
            //"‚ö†Ô∏è Se digitar *#* em qualquer momento da conversa, irei parar de lhe responder por 2h ‚ö†Ô∏è");

        usuariosAtendidos.add(numero);
        return;
    }

    // Se o usu√°rio quiser ver o menu de op√ß√µes
    if (mensagem === '0' && !estadoUsuarios.has(numero)) {
        await client.sendMessage(msg.from, "Digite o n√∫mero da op√ß√£o desejada:\n" +
            "1Ô∏è‚É£ - Formata√ß√£o Windows/Linux\n" +
            "2Ô∏è‚É£ - Manuten√ß√£o em Computador ou Notebook\n" +
            "3Ô∏è‚É£ - Montar PC Gamer\n" +
            "4Ô∏è‚É£ - Aulas de refor√ßo\n" +
            "5Ô∏è‚É£ - Informa√ß√µes sobre maquininhas Ton\n" +
            "6Ô∏è‚É£ - Criar um bot de WhatsApp\n" +
            "#Ô∏è‚É£ - Encerrar a conversa");
        return;
    }

    // Selec√£o da op√ß√£o e armazenamento do estado
    if (['1', '2', '3', '4', '5', '6'].includes(mensagem)) {
        estadoUsuarios.set(numero, mensagem);
    }

    // Defini√ß√£o das respostas com base na op√ß√£o escolhida
    const respostas = {
        '1': "Formata√ß√£o para seu computador. Escolha Windows ou Linux.",
        '2': "Envie fotos, v√≠deos ou √°udios do problema.",
        '3': "Descreva seu sonho gamer!", 
        '4': "Para aulas de refor√ßo, acesse: https://wa.me/p/7663163480368904/5521982545315", 
        '5': "O Vin√≠cius responder√° diretamente.",
        '6': "O Vin√≠cius pode criar um bot para voc√™. Aguarde contato."
    };

    if (respostas[mensagem]) {
        await delay(3000);
        await chat.sendStateTyping();
        await client.sendMessage(msg.from, respostas[mensagem]);
        await client.sendMessage(msg.from, "Para encerrar a conversa, digite #Ô∏è‚É£.\nPara ver outra op√ß√£o, digite 9Ô∏è‚É£.");
        return;
    }

    // Se o usu√°rio quiser escolher outra op√ß√£o
    if (mensagem === '9') {
        estadoUsuarios.delete(numero);
        await client.sendMessage(msg.from, "Voc√™ pode escolher outra op√ß√£o. Digite 0Ô∏è‚É£ para ver as op√ß√µes novamente.");
        return;
    }

    // Se o usu√°rio quiser encerrar a conversa
    if (mensagem === '#') {
        estadoUsuarios.delete(numero);
        usuariosAtendidos.delete(numero);
        usuariosSilenciados.set(numero, agora); // Armazena o hor√°rio de encerramento da conversa
        await client.sendMessage(msg.from, "Conversa encerrada. Um atendente logo logo ir√° lhe atender! üòä");
        return;
    }
    // Verifica se o usu√°rio est√° silenciado e impede resposta se ainda estiver dentro do per√≠odo de 2 horas
if (usuariosSilenciados.has(numero)) {
    const tempoPassado = agora - usuariosSilenciados.get(numero);
    if (tempoPassado < 2 * 60 * 60 * 1000) { // 2 horas em milissegundos
        return; // Ignora a mensagem se estiver dentro do per√≠odo de sil√™ncio
    } else {
        usuariosSilenciados.delete(numero); // Remove o usu√°rio da lista ap√≥s 2 horas
    }
}

    await client.sendMessage(msg.from, "Op√ß√£o inv√°lida. Digite 0Ô∏è‚É£ para voltar ao menu.");
});
